@using CETExamApp.Models
@{
    ViewData["Title"] = "Take Test";
    Layout = null; // Full page layout for test
    
    var attempt = ViewBag.TestAttempt as TestAttempt;
    var testResult = ViewBag.TestResult as TestResult;
    var questions = ViewBag.Questions as List<TestQuestion>;
    var timeRemaining = (int)ViewBag.TimeRemaining;
}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@attempt?.Test?.Title - Online Test</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        body { background-color: #f8f9fa; }
        .question-nav-btn {
            width: 40px;
            height: 40px;
            margin: 5px;
            border-radius: 5px;
            border: 1px solid #ccc;
        }
        .status-unvisited { background-color: #dc3545; color: white; }
        .status-visited { background-color: #0dcaf0; color: white; }
        .status-answered { background-color: #198754; color: white; }
        .status-review { background-color: #ffc107; color: black; }
        .timer-warning { color: #dc3545; animation: blink 1s infinite; }
        @@keyframes blink { 50% { opacity: 0.5; } }
        .question-content { min-height: 400px; }
    </style>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
</head>
<body>
    <div class="container-fluid">
        <!-- Header -->
        <div class="row bg-primary text-white py-3 shadow-sm">
            <div class="col-md-4">
                <h5><i class="bi bi-clipboard-check"></i> @attempt?.Test?.Title</h5>
                <small>Class: @attempt?.Test?.Class?.Name</small>
            </div>
            <div class="col-md-4 text-center">
                <h4 id="timer" class="mb-0">
                    <i class="bi bi-clock"></i> <span id="timeDisplay">@timeRemaining:00</span>
                </h4>
                <small>Time Remaining</small>
            </div>
            <div class="col-md-4 text-end">
                <button type="button" class="btn btn-warning btn-sm" onclick="submitTest()">
                    <i class="bi bi-check-circle"></i> Submit Test
                </button>
            </div>
        </div>

        <div class="row mt-3">
            <!-- Question Navigation Panel -->
            <div class="col-md-3">
                <div class="card shadow sticky-top" style="top: 20px;">
                    <div class="card-header bg-secondary text-white">
                        <h6 class="mb-0"><i class="bi bi-list-ol"></i> Question Navigation</h6>
                    </div>
                    <div class="card-body" style="max-height: 70vh; overflow-y: auto;">
                        <div id="questionNavigation" class="d-flex flex-wrap">
                            @for (int i = 0; i < questions!.Count; i++)
                            {
                                var q = questions[i];
                                var answer = testResult?.StudentAnswers?.FirstOrDefault(sa => sa.QuestionId == q.QuestionId);
                                var statusClass = answer?.Status switch
                                {
                                    QuestionStatus.Unvisited => "status-unvisited",
                                    QuestionStatus.Visited => "status-visited",
                                    QuestionStatus.Answered => "status-answered",
                                    QuestionStatus.MarkedForReview => "status-review",
                                    _ => "status-unvisited"
                                };
                                
                                <button class="question-nav-btn @statusClass" 
                                        onclick="loadQuestion(@i)" 
                                        data-question-index="@i"
                                        id="navBtn_@i">
                                    @(i + 1)
                                </button>
                            }
                        </div>
                        
                        <hr />
                        
                        <!-- Legend -->
                        <div class="mt-3">
                            <small><strong>Legend:</strong></small><br/>
                            <small><span class="badge status-unvisited">1</span> Unvisited</small><br/>
                            <small><span class="badge status-visited">1</span> Visited</small><br/>
                            <small><span class="badge status-answered">1</span> Answered</small><br/>
                            <small><span class="badge status-review">1</span> Review</small>
                        </div>

                        <!-- Summary -->
                        <hr />
                        <div id="summary">
                            <small><strong>Summary:</strong></small><br/>
                            <small>Total: <span id="totalQuestions">@questions.Count</span></small><br/>
                            <small>Answered: <span id="answeredCount">0</span></small><br/>
                            <small>Review: <span id="reviewCount">0</span></small><br/>
                            <small>Unvisited: <span id="unvisitedCount">@questions.Count</span></small>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Question Display Panel -->
            <div class="col-md-9">
                <div class="card shadow">
                    <div class="card-body question-content">
                        <div id="questionContainer">
                            <!-- Questions loaded dynamically via JavaScript -->
                        </div>
                        
                        <!-- Navigation Buttons -->
                        <div class="d-flex justify-content-between mt-4">
                            <button class="btn btn-secondary" onclick="previousQuestion()" id="prevBtn">
                                <i class="bi bi-arrow-left"></i> Previous
                            </button>
                            <div>
                                <button class="btn btn-outline-warning" onclick="markForReview()" id="reviewBtn">
                                    <i class="bi bi-flag"></i> Mark for Review
                                </button>
                                <button class="btn btn-primary" onclick="saveAndNext()" id="saveNextBtn">
                                    Save & Next <i class="bi bi-arrow-right"></i>
                                </button>
                            </div>
                            <button class="btn btn-success" onclick="nextQuestion()" id="nextBtn">
                                Next <i class="bi bi-arrow-right"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
    <script>
        const attemptId = @attempt!.Id;
        const questions = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(questions.Select((q, index) => new {
            index,
            id = q.Id,
            questionId = q.QuestionId,
            questionText = q.Question?.QuestionText,
            questionImagePath = q.Question?.QuestionImagePath,
            questionType = (int)(q.Question?.QuestionType ?? 0),
            topic = q.Question?.Topic?.Name,
            optionA = q.Question?.OptionA,
            optionB = q.Question?.OptionB,
            optionC = q.Question?.OptionC,
            optionD = q.Question?.OptionD,
            optionAImage = q.Question?.OptionAImagePath,
            optionBImage = q.Question?.OptionBImagePath,
            optionCImage = q.Question?.OptionCImagePath,
            optionDImage = q.Question?.OptionDImagePath,
            marks = q.Marks,
            answer = testResult?.StudentAnswers?.FirstOrDefault(sa => sa.QuestionId == q.QuestionId)?.AnswerText,
            status = (int)(testResult?.StudentAnswers?.FirstOrDefault(sa => sa.QuestionId == q.QuestionId)?.Status ?? QuestionStatus.Unvisited),
            isMarkedForReview = testResult?.StudentAnswers?.FirstOrDefault(sa => sa.QuestionId == q.QuestionId)?.IsMarkedForReview ?? false
        })));

        let currentQuestionIndex = 0;
        let timeRemaining = @timeRemaining * 60; // Convert to seconds
        let timerInterval;

        // Initialize
        document.addEventListener('DOMContentLoaded', function() {
            loadQuestion(0);
            startTimer();
            updateSummary();
        });

        // Load question
        function loadQuestion(index) {
            if (index < 0 || index >= questions.length) return;
            
            currentQuestionIndex = index;
            const q = questions[index];
            
            // Mark as visited
            if (q.status === 0) { // Unvisited
                markVisited(q.questionId);
                q.status = 1; // Visited
                updateNavigationButton(index);
            }
            
            let html = `
                <div class="mb-3">
                    <span class="badge bg-secondary">Question ${index + 1} of ${questions.length}</span>
                    <span class="badge bg-info">${q.topic || 'General'}</span>
                    <span class="badge bg-primary">${q.marks} ${q.marks === 1 ? 'mark' : 'marks'}</span>
                </div>
                <h5 class="mb-3">Question ${index + 1}:</h5>
                <div class="mb-4">
                    <div>${q.questionText || ''}</div>
                </div>
            `;
            
            if (q.questionType !== 1) { // Not True/False
                html += '<div class="mb-3"><h6>Options:</h6>';
                
                const options = [
                    { label: 'A', text: q.optionA, image: q.optionAImage },
                    { label: 'B', text: q.optionB, image: q.optionBImage },
                    { label: 'C', text: q.optionC, image: q.optionCImage },
                    { label: 'D', text: q.questionType === 2 ? 'All of the above' : q.optionD, image: q.optionDImage }
                ];
                
                options.forEach(opt => {
                    if (opt.text) {
                        html += `
                            <div class="form-check mb-3 p-3 border rounded ${q.answer === opt.label ? 'bg-light border-primary' : ''}">
                                <input class="form-check-input" type="radio" name="answer_${q.questionId}" 
                                       id="option_${opt.label}" value="${opt.label}" 
                                       ${q.answer === opt.label ? 'checked' : ''}
                                       onchange="saveAnswer()">
                                <label class="form-check-label w-100" for="option_${opt.label}">
                                    <strong>${opt.label}.</strong> <span>${opt.text}</span>
                                </label>
                            </div>
                        `;
                    }
                });
                
                html += '</div>';
            } else { // True/False
                html += `
                    <div class="mb-3">
                        <h6>Select your answer:</h6>
                        <div class="form-check mb-3 p-3 border rounded ${q.answer === 'True' ? 'bg-light border-primary' : ''}">
                            <input class="form-check-input" type="radio" name="answer_${q.questionId}" 
                                   id="option_True" value="True" 
                                   ${q.answer === 'True' ? 'checked' : ''}
                                   onchange="saveAnswer()">
                            <label class="form-check-label" for="option_True">
                                <strong>True</strong>
                            </label>
                        </div>
                        <div class="form-check p-3 border rounded ${q.answer === 'False' ? 'bg-light border-primary' : ''}">
                            <input class="form-check-input" type="radio" name="answer_${q.questionId}" 
                                   id="option_False" value="False" 
                                   ${q.answer === 'False' ? 'checked' : ''}
                                   onchange="saveAnswer()">
                            <label class="form-check-label" for="option_False">
                                <strong>False</strong>
                            </label>
                        </div>
                    </div>
                `;
            }
            
            // Clear Answer button
            html += `
                <div class="mt-3">
                    <button class="btn btn-outline-danger btn-sm" onclick="clearAnswer()">
                        <i class="bi bi-x-circle"></i> Clear Answer
                    </button>
                </div>
            `;
            
            document.getElementById('questionContainer').innerHTML = html;
            
            // Re-render MathJax
            if (window.MathJax) {
                MathJax.typesetPromise();
            }
            
            updateNavigationButtons();
        }

        // Save answer (auto-save)
        function saveAnswer() {
            const q = questions[currentQuestionIndex];
            const selectedOption = document.querySelector(`input[name="answer_${q.questionId}"]:checked`);
            const answer = selectedOption ? selectedOption.value : null;
            
            fetch('/Student/SaveAnswer', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]')?.value || ''
                },
                body: JSON.stringify({
                    attemptId: attemptId,
                    questionId: q.questionId,
                    answer: answer,
                    markForReview: q.isMarkedForReview
                })
            })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    // Update question status
                    if (answer) {
                        q.answer = answer;
                        q.status = q.isMarkedForReview ? 3 : 2; // MarkedForReview or Answered
                    } else {
                        q.status = 1; // Visited
                    }
                    updateNavigationButton(currentQuestionIndex);
                    updateSummary();
                }
            });
        }

        // Mark for review
        function markForReview() {
            const q = questions[currentQuestionIndex];
            q.isMarkedForReview = !q.isMarkedForReview;
            
            const selectedOption = document.querySelector(`input[name="answer_${q.questionId}"]:checked`);
            const answer = selectedOption ? selectedOption.value : null;
            
            if (answer) {
                q.status = q.isMarkedForReview ? 3 : 2;
                saveAnswer();
            }
        }

        // Clear answer
        function clearAnswer() {
            const q = questions[currentQuestionIndex];
            const radioButtons = document.querySelectorAll(`input[name="answer_${q.questionId}"]`);
            radioButtons.forEach(rb => rb.checked = false);
            q.answer = null;
            q.status = 1; // Visited
            saveAnswer();
        }

        // Navigation
        function previousQuestion() {
            if (currentQuestionIndex > 0) {
                loadQuestion(currentQuestionIndex - 1);
            }
        }

        function nextQuestion() {
            if (currentQuestionIndex < questions.length - 1) {
                loadQuestion(currentQuestionIndex + 1);
            }
        }

        function saveAndNext() {
            saveAnswer();
            nextQuestion();
        }

        // Update navigation button color
        function updateNavigationButton(index) {
            const q = questions[index];
            const btn = document.getElementById(`navBtn_${index}`);
            if (btn) {
                btn.className = 'question-nav-btn ';
                switch(q.status) {
                    case 0: btn.className += 'status-unvisited'; break;
                    case 1: btn.className += 'status-visited'; break;
                    case 2: btn.className += 'status-answered'; break;
                    case 3: btn.className += 'status-review'; break;
                }
            }
        }

        // Update all navigation buttons
        function updateAllNavigationButtons() {
            questions.forEach((q, index) => updateNavigationButton(index));
        }

        // Update summary counts
        function updateSummary() {
            const answered = questions.filter(q => q.status === 2).length;
            const review = questions.filter(q => q.status === 3).length;
            const visited = questions.filter(q => q.status === 1).length;
            const unvisited = questions.filter(q => q.status === 0).length;
            
            document.getElementById('answeredCount').textContent = answered;
            document.getElementById('reviewCount').textContent = review;
            document.getElementById('unvisitedCount').textContent = unvisited;
        }

        // Update navigation buttons
        function updateNavigationButtons() {
            const prevBtn = document.getElementById('prevBtn');
            const nextBtn = document.getElementById('nextBtn');
            
            if (prevBtn) prevBtn.disabled = currentQuestionIndex === 0;
            if (nextBtn) nextBtn.disabled = currentQuestionIndex === questions.length - 1;
        }

        // Mark visited (AJAX)
        function markVisited(questionId) {
            fetch('/Student/MarkVisited', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    attemptId: attemptId,
                    questionId: questionId
                })
            });
        }

        // Timer
        function startTimer() {
            timerInterval = setInterval(() => {
                timeRemaining--;
                
                const minutes = Math.floor(timeRemaining / 60);
                const seconds = timeRemaining % 60;
                
                const display = document.getElementById('timeDisplay');
                display.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                
                // Warning when 5 minutes left
                if (timeRemaining <= 300) {
                    display.classList.add('timer-warning');
                }
                
                // Auto-submit when time expires
                if (timeRemaining <= 0) {
                    clearInterval(timerInterval);
                    alert('Time is up! Submitting your test...');
                    submitTest();
                }
            }, 1000);
        }

        // Submit test
        function submitTest() {
            if (!confirm('Are you sure you want to submit the test? You cannot change your answers after submission.')) {
                return;
            }
            
            clearInterval(timerInterval);
            
            const form = document.createElement('form');
            form.method = 'POST';
            form.action = '/Student/SubmitTest';
            
            const input = document.createElement('input');
            input.type = 'hidden';
            input.name = 'attemptId';
            input.value = attemptId;
            
            form.appendChild(input);
            document.body.appendChild(form);
            form.submit();
        }

        // Prevent accidental page close
        window.addEventListener('beforeunload', function (e) {
            e.preventDefault();
            e.returnValue = '';
        });
    </script>
</body>
</html>

