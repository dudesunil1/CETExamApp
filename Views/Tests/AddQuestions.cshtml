@using CETExamApp.Models
@{
    ViewData["Title"] = "Add Questions to Test";
    var test = ViewBag.Test as Test;
}

<div class="container">
    <div class="row">
        <div class="col-12">
            <h2 class="mb-4"><i class="bi bi-question-circle text-primary"></i> Add Questions to Test</h2>
            <h5 class="text-muted">@test?.Title</h5>
            
            <!-- Test Info -->
            <div class="card mb-4">
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <h6><i class="bi bi-book"></i> Class: @test?.Class?.Name</h6>
                        </div>
                        <div class="col-md-3">
                            <h6><i class="bi bi-clock"></i> Duration: @test?.DurationMinutes min</h6>
                        </div>
                        <div class="col-md-3">
                            <h6><i class="bi bi-star"></i> Total Marks: @test?.TotalMarks</h6>
                        </div>
                    </div>
                    <div class="row mt-2">
                        <div class="col-md-6">
                            <strong>Questions Added:</strong> @(test?.TestQuestions?.Count ?? 0)
                        </div>
                        <div class="col-md-6">
                            <strong>Status:</strong> 
                            @switch (test?.Status)
                            {
                                case TestStatus.Draft:
                                    <span class="badge bg-secondary">Draft</span>
                                    break;
                                case TestStatus.Published:
                                    <span class="badge bg-success">Published</span>
                                    break;
                                default:
                                    <span class="badge bg-info">@test?.Status</span>
                                    break;
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-body">
            <!-- Subject Selection -->
            <div id="subjectSelection" class="mb-4">
                <h5><i class="bi bi-book"></i> Select Subjects</h5>
                <p class="text-muted">Choose which subjects to include in this test.</p>
                <div id="subjectsList"></div>
            </div>

            <!-- Topic and Question Selection -->
            <div id="questionSelection" style="display: none;">
                <h5><i class="bi bi-question-circle"></i> Select Questions</h5>
                <div id="currentSubjectInfo" class="alert alert-info mb-3"></div>
                
                <!-- Topic Selection -->
                <div id="topicSelection" class="mb-4">
                    <h6>Select Topics:</h6>
                    <div id="topicsList"></div>
                    <button type="button" class="btn btn-primary" id="loadQuestionsBtn" disabled>
                        <i class="bi bi-search"></i> Load Questions
                    </button>
                </div>

                <!-- Question Selection -->
                <div id="questionsList" class="mb-4" style="display: none;">
                    <div class="d-flex justify-content-between align-items-center mb-3">
                        <h6>Select Questions:</h6>
                        <div>
                            <span id="questionCounter" class="badge bg-info"></span>
                            <button type="button" class="btn btn-sm btn-outline-secondary ms-2" id="selectAllBtn">
                                <i class="bi bi-check-square"></i> Select All
                            </button>
                            <button type="button" class="btn btn-sm btn-outline-secondary" id="deselectAllBtn">
                                <i class="bi bi-square"></i> Deselect All
                            </button>
                        </div>
                    </div>
                    <div id="questionsContainer" class="row"></div>
                </div>

                <!-- Navigation -->
                <div class="d-flex justify-content-between">
                    <button type="button" class="btn btn-secondary" id="backToSubjectsBtn">
                        <i class="bi bi-arrow-left"></i> Back to Subjects
                    </button>
                    <button type="button" class="btn btn-success" id="saveQuestionSelectionBtn" disabled>
                        <i class="bi bi-check"></i> Save Selection & Allocate Students
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let testId = @test?.Id;
        let classId = @test?.ClassId;
        let selectedSubjects = [];
        let currentSubjectId = null;
        let selectedTopics = [];
        let selectedQuestions = {};
        let allQuestions = {};

        $(document).ready(function() {
            loadSubjects();
            setupEventHandlers();
        });

        function setupEventHandlers() {
            $('#loadQuestionsBtn').click(loadQuestions);
            $('#selectAllBtn').click(selectAllQuestions);
            $('#deselectAllBtn').click(deselectAllQuestions);
            $('#saveQuestionSelectionBtn').click(saveQuestionSelection);
            $('#backToSubjectsBtn').click(backToSubjects);
        }

        function loadSubjects() {
            $.ajax({
                url: '@Url.Action("GetSubjectsByClass", "Tests")',
                type: 'GET',
                data: { classId: classId },
                success: function(data) {
                    var subjectsHtml = '<div class="row">';
                    
                    if (data && data.length > 0) {
                        $.each(data, function(i, subject) {
                            subjectsHtml += `
                                <div class="col-md-6 mb-3">
                                    <div class="card">
                                        <div class="card-body">
                                            <div class="form-check">
                                                <input class="form-check-input subject-checkbox" 
                                                       type="checkbox" 
                                                       value="${subject.id}" 
                                                       id="subject_${subject.id}"
                                                       data-subject-name="${subject.name}">
                                                <label class="form-check-label" for="subject_${subject.id}">
                                                    <strong>${subject.name}</strong>
                                                </label>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            `;
                        });
                        subjectsHtml += '</div>';
                        
                        $('#subjectsList').html(subjectsHtml);
                        
                        // Add event handlers
                        $('.subject-checkbox').change(function() {
                            var subjectId = $(this).val();
                            if ($(this).is(':checked')) {
                                selectedSubjects.push(subjectId);
                            } else {
                                selectedSubjects = selectedSubjects.filter(id => id !== subjectId);
                                delete selectedQuestions[subjectId];
                            }
                            updateQuestionSelectionVisibility();
                        });
                    } else {
                        $('#subjectsList').html('<div class="alert alert-warning">No subjects found for the selected class.</div>');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading subjects:', error);
                    showNotification('Error loading subjects: ' + error, 'error');
                    $('#subjectsList').empty();
                }
            });
        }

        function updateQuestionSelectionVisibility() {
            if (selectedSubjects.length > 0 && !currentSubjectId) {
                $('#subjectSelection').hide();
                $('#questionSelection').show();
                loadCurrentSubject();
            } else if (selectedSubjects.length === 0) {
                $('#subjectSelection').show();
                $('#questionSelection').hide();
            }
        }

        function loadCurrentSubject() {
            if (selectedSubjects.length > 0 && !currentSubjectId) {
                currentSubjectId = selectedSubjects[0];
                var subjectName = $(`#subject_${currentSubjectId}`).data('subject-name');
                
                $('#currentSubjectInfo').html(`
                    <strong>${subjectName}</strong> - Select questions for this subject
                `);
                
                loadTopics(currentSubjectId);
            }
        }

        function loadTopics(subjectId) {
            $.ajax({
                url: '@Url.Action("GetTopicsBySubject", "Tests")',
                type: 'GET',
                data: { subjectId: subjectId, classId: classId },
                success: function(data) {
                    var topicsHtml = '<div class="row">';
                    
                    if (data && data.length > 0) {
                        $.each(data, function(i, topic) {
                            topicsHtml += `
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input class="form-check-input topic-checkbox" 
                                               type="checkbox" 
                                               value="${topic.id}" 
                                               id="topic_${topic.id}">
                                        <label class="form-check-label" for="topic_${topic.id}">
                                            ${topic.name}
                                        </label>
                                    </div>
                                </div>
                            `;
                        });
                        topicsHtml += '</div>';
                        
                        $('#topicsList').html(topicsHtml);
                        
                        // Add event handlers for topic checkboxes
                        $('.topic-checkbox').change(function() {
                            updateLoadQuestionsButton();
                        });
                    } else {
                        $('#topicsList').html('<div class="alert alert-warning">No topics found for this subject.</div>');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading topics:', error);
                    showNotification('Error loading topics: ' + error, 'error');
                }
            });
        }

        function updateLoadQuestionsButton() {
            var selectedTopics = $('.topic-checkbox:checked').map(function() {
                return $(this).val();
            }).get();
            
            $('#loadQuestionsBtn').prop('disabled', selectedTopics.length === 0);
        }

        function loadQuestions() {
            var selectedTopics = $('.topic-checkbox:checked').map(function() {
                return $(this).val();
            }).get();
            
            if (selectedTopics.length === 0) {
                showNotification('Please select at least one topic', 'error');
                return;
            }
            
            $.ajax({
                url: '@Url.Action("GetQuestionsByTopics", "Tests")',
                type: 'GET',
                data: { 
                    topicIds: selectedTopics.join(','), 
                    subjectId: currentSubjectId, 
                    requiredCount: 0 
                },
                success: function(data) {
                    if (data.questions && data.questions.length > 0) {
                        displayQuestions(data.questions);
                        allQuestions[currentSubjectId] = data.questions;
                        $('#questionsList').show();
                    } else {
                        $('#questionsList').hide();
                        showNotification('No questions found for the selected topics', 'warning');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error loading questions:', error);
                    showNotification('Error loading questions: ' + error, 'error');
                }
            });
        }

        function displayQuestions(questions) {
            var questionsHtml = '';
            
            $.each(questions, function(i, question) {
                var isSelected = selectedQuestions[currentSubjectId] && 
                                selectedQuestions[currentSubjectId].includes(question.questionId);
                
                questionsHtml += `
                    <div class="col-md-6 mb-3">
                        <div class="card question-card ${isSelected ? 'border-primary' : ''}" data-question-id="${question.questionId}">
                            <div class="card-body">
                                <div class="form-check">
                                    <input class="form-check-input question-checkbox" 
                                           type="checkbox" 
                                           value="${question.questionId}" 
                                           id="question_${question.questionId}"
                                           ${isSelected ? 'checked' : ''}>
                                    <label class="form-check-label" for="question_${question.questionId}">
                                        <strong>${question.questionTextPreview}</strong>
                                        <br>
                                        <small class="text-muted">
                                            ${question.questionType} • ${question.difficultyLevel} • ${question.marks} marks
                                        </small>
                                    </label>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            $('#questionsContainer').html(questionsHtml);
            updateQuestionCounter();
            
            // Add event handlers
            $('.question-checkbox').change(function() {
                updateSelectedQuestions();
                updateQuestionCounter();
            });
        }

        function updateSelectedQuestions() {
            if (!selectedQuestions[currentSubjectId]) {
                selectedQuestions[currentSubjectId] = [];
            }
            
            selectedQuestions[currentSubjectId] = $('.question-checkbox:checked').map(function() {
                return parseInt($(this).val());
            }).get();
            
            // Update card styling
            $('.question-card').removeClass('border-primary');
            $('.question-checkbox:checked').closest('.question-card').addClass('border-primary');
        }

        function updateQuestionCounter() {
            var selected = $('.question-checkbox:checked').length;
            $('#questionCounter').text(`${selected} questions selected`);
        }

        function selectAllQuestions() {
            $('.question-checkbox').prop('checked', true).trigger('change');
        }

        function deselectAllQuestions() {
            $('.question-checkbox').prop('checked', false).trigger('change');
        }

        function saveQuestionSelection() {
            var subjectQuestionsData = {};
            
            $.each(selectedSubjects, function(i, subjectId) {
                if (selectedQuestions[subjectId]) {
                    subjectQuestionsData[subjectId] = selectedQuestions[subjectId];
                }
            });
            
            $.ajax({
                url: '@Url.Action("SaveMultiSubjectQuestionSelection", "Tests")',
                type: 'POST',
                data: { 
                    testId: testId,
                    subjectQuestionsData: JSON.stringify(subjectQuestionsData)
                },
                success: function(response) {
                    if (response.success) {
                        showNotification('Questions saved successfully!', 'success');
                        setTimeout(function() {
                            window.location.href = response.redirectUrl;
                        }, 2000);
                    } else {
                        showNotification('Error saving questions: ' + response.error, 'error');
                    }
                },
                error: function(xhr, status, error) {
                    console.error('Error saving questions:', error);
                    showNotification('Error saving questions: ' + error, 'error');
                }
            });
        }

        function backToSubjects() {
            currentSubjectId = null;
            selectedTopics = [];
            $('#questionSelection').hide();
            $('#subjectSelection').show();
            $('#questionsList').hide();
        }

        function showNotification(message, type) {
            var alertClass = type === 'error' ? 'alert-danger' : 
                           type === 'warning' ? 'alert-warning' : 'alert-success';
            var notification = $('<div class="alert ' + alertClass + ' alert-dismissible fade show" role="alert">' +
                message +
                '<button type="button" class="btn-close" data-bs-dismiss="alert"></button>' +
                '</div>');
            
            $('body').prepend(notification);
            
            setTimeout(function() {
                notification.alert('close');
            }, 5000);
        }
    </script>

    <style>
        .question-card {
            transition: border-color 0.15s ease-in-out;
        }
        .question-card:hover {
            border-color: #0d6efd !important;
        }
    </style>
}