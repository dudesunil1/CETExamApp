@model IEnumerable<CETExamApp.Models.TestAllocation>
@using CETExamApp.Helpers
@{
    ViewData["Title"] = "Test Allocations";
}

<div class="d-flex justify-content-between align-items-center mb-4">
    <h2><i class="bi bi-calendar-event"></i> Test Schedules</h2>
    <div>
        <a asp-action="Allocate" class="btn btn-primary">
            <i class="bi bi-plus-circle"></i> Allocate Test
        </a>
    </div>
</div>

@if (TempData["Success"] != null)
{
    <div class="alert alert-success alert-dismissible fade show">
        @TempData["Success"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Error"] != null)
{
    <div class="alert alert-danger alert-dismissible fade show">
        @TempData["Error"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

@if (TempData["Info"] != null)
{
    <div class="alert alert-info alert-dismissible fade show">
        @TempData["Info"]
        <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
    </div>
}

<div class="alert alert-info">
    <i class="bi bi-info-circle"></i> <strong>Test Schedules Overview:</strong> View and manage all test schedules with allocated students.
</div>

<!-- Filters -->
<div class="card shadow mb-3">
    <div class="card-body">
        <div class="row g-3">
            <div class="col-md-4">
                <div class="mb-3">
                    <label class="form-label">Filter by Test</label>
                    <select class="form-select" id="filterTest">
                        <option value="">All Tests</option>
                        @if (ViewBag.TestId != null)
                        {
                            @foreach (var item in (SelectList)ViewBag.TestId)
                            {
                                <option value="@item.Value">@item.Text</option>
                            }
                        }
                    </select>
                </div>
            </div>
            <div class="col-md-4">
                <div class="mb-3">
                    <label class="form-label">Filter by Date (Optional)</label>
                    <input type="date" class="form-control" id="filterDate" />
                </div>
            </div>
            <div class="col-md-4">
                <div class="mb-3">
                    <label class="form-label">&nbsp;</label>
                    <div class="d-grid gap-2 d-md-flex">
                        <button type="button" class="btn btn-primary" id="applyFilters">
                            <i class="bi bi-funnel"></i> Apply Filters
                        </button>
                        <button type="button" class="btn btn-outline-secondary" id="clearFilters">
                            <i class="bi bi-x-circle"></i> Clear
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="card shadow">
    <div class="card-body">
        <div class="d-flex justify-content-between align-items-center mb-3">
            <h6 class="mb-0">Test Schedules List</h6>
            <button type="button" class="btn btn-outline-primary btn-sm" id="refreshSchedules">
                <i class="bi bi-arrow-clockwise"></i> Refresh
            </button>
        </div>
        
        <!-- Test Schedules Table -->
        <div class="table-responsive">
            <table class="table table-hover" id="testSchedulesTable">
                <thead class="table-light">
                    <tr>
                        <th>Test</th>
                        <th>Start Date & Time</th>
                        <th>End Date & Time</th>
                        <th>Student Count</th>
                        <th width="200">Actions</th>
                    </tr>
                </thead>
                <tbody id="testSchedulesTableBody">
                    <!-- Test schedules will be populated here -->
                </tbody>
            </table>
        </div>
        
        <!-- Loading indicator -->
        <div id="schedulesLoading" class="text-center py-4" style="display: none;">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2 text-muted">Loading test schedules...</p>
        </div>
        
        <!-- No data message -->
        <div id="noSchedulesMessage" class="text-center py-4" style="display: none;">
            <i class="bi bi-calendar-x text-muted" style="font-size: 3rem;"></i>
            <p class="mt-2 text-muted">No test schedules found.</p>
        </div>
    </div>
</div>

@Html.AntiForgeryToken()

@section Scripts {
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            initializeTestSchedules();
        });

        // Test Schedules functionality
        function initializeTestSchedules() {
            const refreshBtn = document.getElementById('refreshSchedules');
            const filterTest = document.getElementById('filterTest');
            const filterDate = document.getElementById('filterDate');
            const applyFiltersBtn = document.getElementById('applyFilters');
            const clearFiltersBtn = document.getElementById('clearFilters');
            
            // Load schedules on page load
            loadTestSchedules();
            
            // Refresh button
            if (refreshBtn) {
                refreshBtn.addEventListener('click', loadTestSchedules);
            }
            
            // Apply filters button
            if (applyFiltersBtn) {
                applyFiltersBtn.addEventListener('click', loadTestSchedules);
            }
            
            // Clear filters
            if (clearFiltersBtn) {
                clearFiltersBtn.addEventListener('click', function() {
                    filterTest.value = '';
                    filterDate.value = '';
                    loadTestSchedules();
                });
            }
        }

        async function loadTestSchedules() {
            const loadingDiv = document.getElementById('schedulesLoading');
            const tableBody = document.getElementById('testSchedulesTableBody');
            const noDataDiv = document.getElementById('noSchedulesMessage');
            const table = document.getElementById('testSchedulesTable');
            
            // Show loading
            loadingDiv.style.display = 'block';
            table.style.display = 'none';
            noDataDiv.style.display = 'none';
            
            try {
                const filterTest = document.getElementById('filterTest').value;
                const filterDate = document.getElementById('filterDate').value;
                
                let url = '/TestAllocations/LoadSchedules';
                const params = new URLSearchParams();
                if (filterTest) params.append('testId', filterTest);
                if (filterDate) params.append('date', filterDate);
                if (params.toString()) url += '?' + params.toString();
                
                const response = await fetch(url);
                if (response.ok) {
                    const schedules = await response.json();
                    displayTestSchedules(schedules);
                } else {
                    console.error('Error loading test schedules');
                    showNoDataMessage();
                }
            } catch (error) {
                console.error('Error loading test schedules:', error);
                showNoDataMessage();
            } finally {
                loadingDiv.style.display = 'none';
            }
        }

        function displayTestSchedules(schedules) {
            const tableBody = document.getElementById('testSchedulesTableBody');
            const noDataDiv = document.getElementById('noSchedulesMessage');
            const table = document.getElementById('testSchedulesTable');
            
            if (schedules.length === 0) {
                showNoDataMessage();
                return;
            }
            
            // Show table
            table.style.display = 'table';
            noDataDiv.style.display = 'none';
            
            // Clear existing rows
            tableBody.innerHTML = '';
            
            // Populate schedules
            schedules.forEach(function(schedule) {
                const row = document.createElement('tr');
                const startTime = new Date(schedule.scheduledStartTime);
                const endTime = new Date(schedule.scheduledEndTime);
                
                // Convert to IST (UTC+5:30)
                const istOffset = 5.5 * 60 * 60 * 1000;
                const startTimeIST = new Date(startTime.getTime() + istOffset);
                const endTimeIST = new Date(endTime.getTime() + istOffset);
                
                // Validate schedule ID
                const scheduleId = schedule.id;
                console.log('Processing schedule:', schedule); // Debug log
                if (!scheduleId || scheduleId <= 0) {
                    console.error('Invalid schedule ID:', scheduleId, schedule);
                    return; // Skip this row if ID is invalid
                }
                
                row.innerHTML = `
                    <td>
                        <strong>${schedule.testTitle}</strong>
                        <br><small class="text-muted">${schedule.testClass || 'No Class'}</small>
                    </td>
                    <td>
                        ${startTimeIST.toLocaleDateString('en-IN')} ${startTimeIST.toLocaleTimeString('en-IN', {hour: '2-digit', minute: '2-digit'})} IST
                    </td>
                    <td>
                        ${endTimeIST.toLocaleDateString('en-IN')} ${endTimeIST.toLocaleTimeString('en-IN', {hour: '2-digit', minute: '2-digit'})} IST
                    </td>
                    <td>
                        <span class="badge bg-primary">${schedule.studentCount} student${schedule.studentCount !== 1 ? 's' : ''}</span>
                    </td>
                    <td>
                        <button type="button" class="btn btn-outline-info btn-sm me-1" onclick="viewScheduleStudents(${scheduleId})">
                            <i class="bi bi-eye"></i> View
                        </button>
                        <button type="button" class="btn btn-outline-warning btn-sm me-1" onclick="rescheduleTest(${scheduleId})">
                            <i class="bi bi-calendar-event"></i> Reschedule
                        </button>
                        <button type="button" class="btn btn-outline-danger btn-sm" onclick="deleteSchedule(${scheduleId})">
                            <i class="bi bi-trash"></i> Delete
                        </button>
                    </td>
                `;
                tableBody.appendChild(row);
            });
        }

        function showNoDataMessage() {
            const table = document.getElementById('testSchedulesTable');
            const noDataDiv = document.getElementById('noSchedulesMessage');
            
            table.style.display = 'none';
            noDataDiv.style.display = 'block';
        }

        function viewScheduleStudents(scheduleId) {
            // Validate schedule ID
            if (!scheduleId || scheduleId <= 0) {
                alert('Invalid schedule ID. Please refresh the page and try again.');
                return;
            }
            
            // Debug: Log the schedule ID being sent
            console.log('Opening ViewScheduleStudents with schedule ID:', scheduleId);
            
            // Navigate to view students page
            window.location.href = `/Admin/TestAllocations/ViewScheduleStudents/${scheduleId}`;
        }

        function rescheduleTest(scheduleId) {
            // Validate schedule ID
            if (!scheduleId || scheduleId <= 0) {
                alert('Invalid schedule ID. Please refresh the page and try again.');
                return;
            }
            
            // Navigate to reschedule page
            window.location.href = `/Admin/TestAllocations/RescheduleSchedule/${scheduleId}`;
        }

        function deleteSchedule(scheduleId) {
            // Validate schedule ID
            if (!scheduleId || scheduleId <= 0) {
                alert('Invalid schedule ID. Please refresh the page and try again.');
                return;
            }
            
            if (confirm('Are you sure you want to delete this test schedule? This will also remove all student allocations for this schedule.')) {
                // Perform delete operation
                fetch(`/Admin/TestAllocations/DeleteSchedule/${scheduleId}`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                })
                .then(response => {
                    if (response.ok) {
                        loadTestSchedules(); // Refresh the list
                        alert('Test schedule deleted successfully!');
                    } else {
                        alert('Error deleting test schedule. Please try again.');
                    }
                })
                .catch(error => {
                    console.error('Error:', error);
                    alert('Error deleting test schedule. Please try again.');
                });
            }
        }
    </script>
}

